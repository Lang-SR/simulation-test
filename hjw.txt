花了两小时速成github,并通过github desktop跳过对git bash命令行操作的学习。并在社区中寻找了汉化插件，通过desktop中的教程初步完成了对github的管理使用。
使用git对代码进行版本控制，首先要在github上创建一个仓库，或者是将别人的在线仓库拉取到本地，随后在本地仓库上对代码进行修改，修改完毕后commit到主仓库中，并备注修改内容，此举可以让我们对代码的修改留下标记和备份。
我们还可以用push功能将本地仓库的更新，推送到在线仓库；反之可以利用pull将在线仓库的代码拉取到本地。值得一提的是，本地仓库版本若落后于在线仓库，将无法push，同理，在本地仓库对代码进行更新时，也需要pull一下同步在线仓库的最新更新。这很大程度上能避免某些尴尬情况的出现————比如在本地debug了半天依赖错误，解决之后push一看，原来在线仓库早解决这个问题了。
我们还可以在一个仓库中创建多个分支，以完成在基础代码上开发相对独立功能的新代码，或者解决多人同时开发同一代码，明明修改前刚pull过，提交的时候又冲突的问题。同理有相同的commit。当一个分支功能开发的较为完善时，我们可以将分支合并到main，把这些代码变成基础代码，并进一步以此创建新的分支，不断完成对代码的开发。此举有利于多成员对一个代码任务的集体开发，方便查看成员进度，并及时了解他们的想法。
git还提供了非常方便的版本回滚功能，在我们每次commit时，会在git中保存旧版本（在vscode中也有对应的git插件），在编辑时可以检查旧版本的文件，并将我们想要的代码重新修改过来，然后再提交即可。

二自由度模型
https://blog.csdn.net/weixin_42301220/article/details/124776068
https://blog.csdn.net/weixin_35995661/article/details/143421890
https://www.yoojia.com/ask/17-12411202778186362305.html
在汽车动力学领域，转向系统的性能直接影响到车辆的操控性和安全性。为了深入理解并优化转向系统，工程师们开发了多个数学模型进行分析，其中线性二自由度模型是一个广泛使用的简化模型。它提供了一个理论基础，帮助工程师对车辆的横向动态行为进行预测和分析。
在传统运动学模型里面一个很重要的限定条件是考虑车辆是低速行驶，可以认为轮胎是刚性轮胎，认为车辆轮胎沿着车身坐标系的轮胎转向角和轮胎的速度方向是一致的，基于这一条件，我们才确定了车辆的质心O，转弯半径R，进而确定了车辆的质心速度V等一系列物理量。当车辆速度很高时，车辆前后轮的速度矢量不再与轮子方向一致。此时运动学模型就不能准确地描述车辆的运动状态，这就需要引入使用动力学模型对车辆进行建模，以保证在车辆在高速运动时的仿真数据可靠性。
之所以叫二自由度的车辆动力学模型，其实二自由度指的是横向上y轴的运动和绕z轴的转动，忽略了纵向x轴的的横向运动，也有三自由度模型，不接触那么深了。详细的物理推导我也是看的网上的学习笔记，懵懵的，打算后面慢慢学习。
